#!/usr/bin/python3

import argparse
import json
import os
import smtplib
import sys
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

parser = argparse.ArgumentParser(description="yabs emailer")
parser.add_argument("-s", "--settings",
	help="The email settings JSON file to use",
	required=True,
	dest="settings"
	)
parser.add_argument("-S", "--subject",
	help="The subject of the email",
	default="(No subject)",
	dest="subject"
	)
parser.add_argument("-t", "--textfile",
	help="The plain text file containing the message to send",
	required=True,
	dest="textfile"
	)
options = parser.parse_args()

# Fix errors with relative paths and symlinks
real_email_settings_file = os.path.abspath(options.settings)

# Send an email using the information in the email settings file and the
#  message specified on the command line

email_sent = False
if not os.path.isfile(real_email_settings_file):
	# Email settings not found
	print("Email settings file not found!")
	sys.exit(1)
else:
	email_settings_reader = open(real_email_settings_file, mode="rt")
	email_settings = json.load(email_settings_reader)
	if not (
			('smtp_server' in email_settings) and
			('login_name' in email_settings) and
			('password' in email_settings) and
			('from_address' in email_settings) and
			('to_address' in email_settings)
		):
		print("Error loading settings file!")
		sys.exit(1)
	else:
		# Everything's OK with the email settings, so go ahead and work on
		#  sending the message
		msg = MIMEMultipart()
		msg['From'] = email_settings['from_address']
		msg['To'] = email_settings['to_address']
		#msg['Date'] = formatdate(localtime=True)
		msg['Subject'] = options.subject
		
		# Read the text file
		with open(options.textfile, 'r') as infile:
			message_text = infile.read()
		# Attach it to the message
		msg.attach(MIMEText(message_text))
		
		# Send the message
		try:
			smtp = smtplib.SMTP(email_settings['smtp_server'])
			smtp.starttls()
			smtp.login(email_settings['login_name'], email_settings['password'])
			smtp.send_message(msg)
			smtp.quit()
			email_sent = True
		except:
			print("Error sending message!")
			error_type, value, traceback = sys.exc_info()
			print(value)
			print(error_type)
			print(traceback)

if not email_sent:
	# Fail loudly and print the whole message.
	# If this is being run in cron, then it will show up in the local mail
	#  system, so at least it's recorded *somewhere*
	# The error details were printed above, so all we need to worry about
	#  now is printing the message.
	print("Message subject: " + options.subject + "\n")
	print("Message content:")
	print(options.message)
